[
  {
    "objectID": "HW9.html",
    "href": "HW9.html",
    "title": "HW9",
    "section": "",
    "text": "library(tidyverse)\nlibrary(tidymodels)\nlibrary(baguette)\nlibrary(doParallel)\nlibrary(vip)\nlibrary(rpart.plot)\nlibrary(broom)\nlibrary(iml)\n\nset.seed(11)\n\n\nbike_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/SeoulBikeData.csv\", \n                      locale = locale(encoding = \"latin1\"))"
  },
  {
    "objectID": "HW9.html#consolidated-data-manipulations-from-hw8",
    "href": "HW9.html#consolidated-data-manipulations-from-hw8",
    "title": "HW9",
    "section": "Consolidated Data Manipulations From HW8",
    "text": "Consolidated Data Manipulations From HW8\n\nbike_data &lt;- bike_data |&gt;\n  mutate(\n    date = lubridate::dmy(Date),\n    seasons = factor(Seasons),\n    holiday = factor(Holiday),\n    fn_day = factor(`Functioning Day`)\n  ) |&gt;\n  select(-Date, -Seasons, -Holiday, -`Functioning Day`) |&gt;\n  rename(\n    bike_count = `Rented Bike Count`,\n    hour = Hour,\n    temp = `Temperature(°C)`,\n    wind_speed = `Wind speed (m/s)`,\n    humidity = `Humidity(%)`,\n    vis = `Visibility (10m)`,\n    dew_point_temp = `Dew point temperature(°C)`,\n    solar_radiation = `Solar Radiation (MJ/m2)`,\n    rainfall = `Rainfall(mm)`,\n    snowfall = `Snowfall (cm)`\n  ) |&gt;\n  filter(fn_day == \"Yes\") |&gt;\n  group_by(date, seasons, holiday) |&gt;\n  summarize(\n    bike_count = sum(bike_count),\n    temp = mean(temp),\n    humidity = mean(humidity),\n    wind_speed = mean(wind_speed),\n    vis = mean(vis),\n    dew_point_temp = mean(dew_point_temp),\n    solar_radiation = mean(solar_radiation),\n    rainfall = sum(rainfall),\n    snowfall = sum(snowfall),\n    .groups = \"drop\"\n  )\n\nglimpse(bike_data)\n\nRows: 353\nColumns: 12\n$ date            &lt;date&gt; 2017-12-01, 2017-12-02, 2017-12-03, 2017-12-04, 2017-…\n$ seasons         &lt;fct&gt; Winter, Winter, Winter, Winter, Winter, Winter, Winter…\n$ holiday         &lt;fct&gt; No Holiday, No Holiday, No Holiday, No Holiday, No Hol…\n$ bike_count      &lt;dbl&gt; 9539, 8523, 7222, 8729, 8307, 6669, 8549, 8032, 7233, …\n$ temp            &lt;dbl&gt; -2.45416667, 1.32500000, 4.87500000, -0.30416667, -4.4…\n$ humidity        &lt;dbl&gt; 45.87500, 61.95833, 81.54167, 52.50000, 36.41667, 70.7…\n$ wind_speed      &lt;dbl&gt; 1.5375000, 1.7125000, 1.6125000, 3.4500000, 1.1083333,…\n$ vis             &lt;dbl&gt; 1870.7500, 1471.0833, 455.7500, 1362.8333, 1959.4583, …\n$ dew_point_temp  &lt;dbl&gt; -13.5458333, -5.7166667, 1.8833333, -9.9250000, -17.42…\n$ solar_radiation &lt;dbl&gt; 0.24875000, 0.26375000, 0.12541667, 0.28291667, 0.0358…\n$ rainfall        &lt;dbl&gt; 0.0, 0.0, 4.0, 0.1, 0.0, 1.3, 0.0, 0.0, 0.0, 4.1, 0.0,…\n$ snowfall        &lt;dbl&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 8.6, 10.4, 0.0, 0.0, 32.5, 0.…"
  },
  {
    "objectID": "HW9.html#data-split",
    "href": "HW9.html#data-split",
    "title": "HW9",
    "section": "Data Split",
    "text": "Data Split\n\nbike_split &lt;- initial_split(bike_data, \n                            prop = 0.75, \n                            strata = seasons)\nbike_train &lt;- training(bike_split)\nbike_test &lt;- testing(bike_split)\nbike_folds &lt;- vfold_cv(bike_train, v = 10)\n\nFor all models, fit_resamples() and tune_grid() functions are applied to the bike_folds. This ensures all tuning and fitting is performed on the training set."
  },
  {
    "objectID": "HW9.html#best-model-from-hw8",
    "href": "HW9.html#best-model-from-hw8",
    "title": "HW9",
    "section": "Best Model From HW8",
    "text": "Best Model From HW8\n\nRecipe (Model 3 with Interactions and Polynomials)\n\nMLR_rec3 &lt;- recipe(bike_count ~ ., data = bike_train) |&gt;\n  step_date(date, features = \"dow\") |&gt;\n  step_mutate(day_type = factor(\n    if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))) |&gt;\n  step_rm(date, date_dow) |&gt;\n  step_dummy(seasons, holiday, day_type) |&gt;\n  step_normalize(all_numeric_predictors()) |&gt;\n  step_interact(terms = ~ starts_with(\"seasons\") * starts_with(\"holiday\") +\n                  starts_with(\"seasons\") * temp +\n                  temp * rainfall) |&gt;\n  step_poly(temp, wind_speed, vis, dew_point_temp, solar_radiation, rainfall, snowfall, degree = 2)\n\n\n\nMLR Spec, Workflow, and Fit\n\n# Ensure we have RMSE and MAE metrics\nmetrics &lt;- metric_set(rmse, mae)\n\nMLR_spec &lt;- linear_reg() |&gt;\n  set_engine(\"lm\")\n\nMLR_workflow &lt;- workflow() |&gt;\n  add_recipe(MLR_rec3) |&gt;\n  add_model(MLR_spec)\n\nMLR_CV_fit &lt;- fit_resamples(MLR_workflow, \n                            resamples = bike_folds,\n                            metrics = metrics)\n\nMLR_final_fit &lt;- last_fit(MLR_workflow, \n                          split = bike_split,\n                          metrics = metrics)"
  },
  {
    "objectID": "HW9.html#new-models",
    "href": "HW9.html#new-models",
    "title": "HW9",
    "section": "New Models",
    "text": "New Models\n\nLASSO\n\nlasso_spec &lt;- linear_reg(penalty = tune(), \n                         mixture = 1) |&gt;\n  set_engine(\"glmnet\")\n\nlasso_grid &lt;- grid_regular(penalty(range = c(-3, 0)), \n                           levels = 10)\n\nlasso_workflow &lt;- workflow() |&gt;\n  add_recipe(MLR_rec3) |&gt;\n  add_model(lasso_spec)\n\nlasso_res &lt;- tune_grid(\n  lasso_workflow,\n  resamples = bike_folds,\n  grid = lasso_grid,\n  metrics = metrics,\n  # For Parallel Processing \n  control = control_grid(parallel_over = \"everything\")\n)\n\nbest_lasso &lt;- select_best(lasso_res, \n                          metric = \"rmse\")\n\nfinal_lasso &lt;- finalize_workflow(lasso_workflow, \n                                 best_lasso)\n\nlasso_test &lt;- last_fit(final_lasso, \n                       split = bike_split,\n                       metrics = metrics)\n\n\n\nDecision Tree\n\ntree_spec &lt;- decision_tree(cost_complexity = tune(), \n                           tree_depth = tune()) |&gt;\n  set_engine(\"rpart\") |&gt;\n  set_mode(\"regression\")\n\ntree_grid &lt;- grid_regular(cost_complexity(), \n                          tree_depth(), \n                          levels = 10)\n\ntree_workflow &lt;- workflow() |&gt;\n  add_recipe(MLR_rec3) |&gt;\n  add_model(tree_spec)\n\ntree_res &lt;- tune_grid(\n  tree_workflow,\n  resamples = bike_folds,\n  grid = tree_grid,\n  metrics = metrics,\n  # For Parallel Processing \n  control = control_grid(parallel_over = \"everything\")\n)\n\nbest_tree &lt;- select_best(tree_res, \n                         metric = \"rmse\")\n\nfinal_tree &lt;- finalize_workflow(tree_workflow, \n                                best_tree)\n\ntree_test &lt;- last_fit(final_tree, \n                      split = bike_split,\n                      metrics = metrics)\n\n\n\nBagged Tree\n\nbagged_tree_spec &lt;- bag_tree(cost_complexity = tune(), \n                             tree_depth = tune()) |&gt;\n  set_engine(\"rpart\", times = 50) |&gt;\n  set_mode(\"regression\")\n\nbagged_tree_grid &lt;- grid_regular(cost_complexity(), \n                                 tree_depth(), levels = 10)\n\nbagged_tree_workflow &lt;- workflow() |&gt;\n  add_recipe(MLR_rec3) |&gt;\n  add_model(bagged_tree_spec)\n\nbagged_tree_res &lt;- tune_grid(\n  bagged_tree_workflow,\n  resamples = bike_folds,\n  grid = bagged_tree_grid,\n  metrics = metrics,\n  # For Parallel Processing \n  control = control_grid(parallel_over = \"everything\")\n)\n\nbest_bagged_tree &lt;- select_best(bagged_tree_res, \n                                metric = \"rmse\")\n\nfinal_bagged_tree &lt;- finalize_workflow(bagged_tree_workflow, \n                                       best_bagged_tree)\n\nbagged_tree_test &lt;- last_fit(final_bagged_tree, \n                             split = bike_split,\n                             metrics = metrics)\n\n\n\nRandom Forest\n\nrf_spec &lt;- rand_forest(mtry = tune(), \n                       trees = 500, \n                       min_n = tune()) |&gt;\n  set_engine(\"ranger\", \n             importance = \"permutation\") |&gt;\n  set_mode(\"regression\")\n\nrf_grid &lt;- grid_regular(mtry(range = c(1, 10)), \n                        min_n(range = c(2, 10)), \n                        levels = 10)\n\nrf_workflow &lt;- workflow() |&gt;\n  add_recipe(MLR_rec3) |&gt;\n  add_model(rf_spec)\n\nrf_res &lt;- tune_grid(\n  rf_workflow,\n  resamples = bike_folds,\n  grid = rf_grid,\n  metrics = metrics,\n  # For Parallel Processing \n  control = control_grid(parallel_over = \"everything\")\n)\n\nbest_rf &lt;- select_best(rf_res, metric = \"rmse\")\n\nfinal_rf &lt;- finalize_workflow(rf_workflow, \n                              best_rf)\n\nrf_test &lt;- last_fit(final_rf, \n                    split = bike_split,\n                    metrics = metrics)"
  },
  {
    "objectID": "HW9.html#test-metrics",
    "href": "HW9.html#test-metrics",
    "title": "HW9",
    "section": "Test Metrics",
    "text": "Test Metrics\n\ntest_metrics &lt;- bind_rows(\n  collect_metrics(MLR_final_fit),\n  collect_metrics(lasso_test),\n  collect_metrics(tree_test),\n  collect_metrics(bagged_tree_test),\n  collect_metrics(rf_test)\n) |&gt;\n  mutate(model = rep(c(\"MLR\", \"LASSO\", \"Tree\", \"Bagged Tree\", \"Random Forest\"), \n                     each = 2))\n\nrmse_table &lt;- test_metrics |&gt;\n  filter(.metric == \"rmse\") |&gt;\n  arrange(.estimate)\n\nknitr::kable(rmse_table, \n             caption = \"Model Comparison Based on RMSE\")\n\n\nModel Comparison Based on RMSE\n\n\n.metric\n.estimator\n.estimate\n.config\nmodel\n\n\n\n\nrmse\nstandard\n2598.915\nPreprocessor1_Model1\nBagged Tree\n\n\nrmse\nstandard\n2814.029\nPreprocessor1_Model1\nRandom Forest\n\n\nrmse\nstandard\n3284.902\nPreprocessor1_Model1\nMLR\n\n\nrmse\nstandard\n3286.127\nPreprocessor1_Model1\nLASSO\n\n\nrmse\nstandard\n3557.071\nPreprocessor1_Model1\nTree\n\n\n\n\nmae_table &lt;- test_metrics |&gt;\n  filter(.metric == \"mae\") |&gt;\n  arrange(.estimate)\n\nknitr::kable(mae_table, \n             caption = \"Model Comparison Based on MAE\")\n\n\nModel Comparison Based on MAE\n\n\n.metric\n.estimator\n.estimate\n.config\nmodel\n\n\n\n\nmae\nstandard\n2068.516\nPreprocessor1_Model1\nBagged Tree\n\n\nmae\nstandard\n2095.624\nPreprocessor1_Model1\nMLR\n\n\nmae\nstandard\n2113.972\nPreprocessor1_Model1\nLASSO\n\n\nmae\nstandard\n2205.913\nPreprocessor1_Model1\nRandom Forest\n\n\nmae\nstandard\n2718.422\nPreprocessor1_Model1\nTree\n\n\n\n\n\nBagged Tree had the lowest RMSE and MAE!"
  },
  {
    "objectID": "HW9.html#extract-the-final-model-fits-and-report-a-summary-of-the-model",
    "href": "HW9.html#extract-the-final-model-fits-and-report-a-summary-of-the-model",
    "title": "HW9",
    "section": "Extract the Final Model Fits and Report a Summary of the Model",
    "text": "Extract the Final Model Fits and Report a Summary of the Model\nNote: I took “Final” to mean to fit each model using the entire dataset\n\nMLR\n\nmlr_coefficients &lt;- MLR_workflow |&gt;\n  fit(data = bike_data) |&gt;\n  extract_fit_parsnip() |&gt;\n  tidy()\n\nknitr::kable(mlr_coefficients, \n             caption = \"MLR Coefficients\")\n\n\nMLR Coefficients\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n20921.8943\n1288.0765\n16.2427421\n0.0000000\n\n\nhumidity\n-2003.4896\n1172.3411\n-1.7089648\n0.0884121\n\n\nseasons_Spring\n-1962.8818\n215.6345\n-9.1028175\n0.0000000\n\n\nseasons_Summer\n6779.1921\n800.0040\n8.4739476\n0.0000000\n\n\nseasons_Winter\n-4759.7793\n844.5861\n-5.6356353\n0.0000000\n\n\nholiday_No.Holiday\n749.3035\n171.5785\n4.3671172\n0.0000169\n\n\nday_type_Weekend\n-1090.6728\n152.7484\n-7.1403244\n0.0000000\n\n\nseasons_Spring_x_holiday_No.Holiday\n-259.8792\n213.2862\n-1.2184529\n0.2239356\n\n\nseasons_Summer_x_holiday_No.Holiday\n-178.9257\n232.3504\n-0.7700686\n0.4418186\n\n\nseasons_Winter_x_holiday_No.Holiday\n-301.1236\n168.4467\n-1.7876498\n0.0747642\n\n\nseasons_Spring_x_temp\n2163.8559\n409.8049\n5.2802094\n0.0000002\n\n\nseasons_Summer_x_temp\n-6982.6592\n872.8490\n-7.9998477\n0.0000000\n\n\nseasons_Winter_x_temp\n-2104.3388\n1057.8685\n-1.9892253\n0.0475143\n\n\ntemp_x_rainfall\n-1401.8542\n426.6745\n-3.2855354\n0.0011290\n\n\ntemp_poly_1\n-72359.8730\n57700.7084\n-1.2540552\n0.2107232\n\n\ntemp_poly_2\n-12444.5725\n16290.2392\n-0.7639282\n0.4454643\n\n\nwind_speed_poly_1\n-8180.9182\n3291.0308\n-2.4858224\n0.0134274\n\n\nwind_speed_poly_2\n2793.1723\n3045.5700\n0.9171263\n0.3597565\n\n\nvis_poly_1\n4770.3910\n4304.3379\n1.1082752\n0.2685625\n\n\nvis_poly_2\n-1753.4572\n2874.4817\n-0.6100081\n0.5422827\n\n\ndew_point_temp_poly_1\n121454.3883\n68116.2698\n1.7830452\n0.0755122\n\n\ndew_point_temp_poly_2\n-11542.9744\n8825.5529\n-1.3079038\n0.1918303\n\n\nsolar_radiation_poly_1\n55659.1332\n5528.1863\n10.0682449\n0.0000000\n\n\nsolar_radiation_poly_2\n-7471.5625\n3414.2086\n-2.1883732\n0.0293539\n\n\nrainfall_poly_1\n-35377.9878\n6357.2641\n-5.5649706\n0.0000001\n\n\nrainfall_poly_2\n15909.4062\n3458.9693\n4.5994644\n0.0000061\n\n\nsnowfall_poly_1\n-3508.9960\n3277.5961\n-1.0706005\n0.2851435\n\n\nsnowfall_poly_2\n-1494.8132\n3055.4725\n-0.4892249\n0.6250125\n\n\n\n\n\n\n\nLASSO\n\nlasso_coefficients &lt;- final_lasso |&gt;\n  fit(data = bike_data) |&gt;\n  extract_fit_parsnip() |&gt;\n  tidy()\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\nknitr::kable(lasso_coefficients, \n             caption = \"LASSO Coefficients\")\n\n\nLASSO Coefficients\n\n\nterm\nestimate\npenalty\n\n\n\n\n(Intercept)\n21419.9768\n0.001\n\n\nhumidity\n-562.0810\n0.001\n\n\nseasons_Spring\n-1953.3250\n0.001\n\n\nseasons_Summer\n6950.2775\n0.001\n\n\nseasons_Winter\n-4412.8947\n0.001\n\n\nholiday_No.Holiday\n727.0611\n0.001\n\n\nday_type_Weekend\n-1109.2631\n0.001\n\n\nseasons_Spring_x_holiday_No.Holiday\n-269.2369\n0.001\n\n\nseasons_Summer_x_holiday_No.Holiday\n-167.2348\n0.001\n\n\nseasons_Winter_x_holiday_No.Holiday\n-274.3857\n0.001\n\n\nseasons_Spring_x_temp\n2278.8344\n0.001\n\n\nseasons_Summer_x_temp\n-7210.8377\n0.001\n\n\nseasons_Winter_x_temp\n-1642.9023\n0.001\n\n\ntemp_x_rainfall\n-1299.8515\n0.001\n\n\ntemp_poly_1\n0.0000\n0.001\n\n\ntemp_poly_2\n-3902.9097\n0.001\n\n\nwind_speed_poly_1\n-8079.6430\n0.001\n\n\nwind_speed_poly_2\n2798.6343\n0.001\n\n\nvis_poly_1\n5834.9719\n0.001\n\n\nvis_poly_2\n-1866.0305\n0.001\n\n\ndew_point_temp_poly_1\n36106.0481\n0.001\n\n\ndew_point_temp_poly_2\n-13642.8977\n0.001\n\n\nsolar_radiation_poly_1\n55226.4596\n0.001\n\n\nsolar_radiation_poly_2\n-7955.7918\n0.001\n\n\nrainfall_poly_1\n-37798.8217\n0.001\n\n\nrainfall_poly_2\n15898.6079\n0.001\n\n\nsnowfall_poly_1\n-4404.4337\n0.001\n\n\nsnowfall_poly_2\n-1250.8169\n0.001\n\n\n\n\n\n\n\nDecision Tree\n\nfinal_tree |&gt;\n  fit(data = bike_data) |&gt;\n  extract_fit_parsnip() |&gt;\n  extract_fit_engine() |&gt;\n  rpart.plot::rpart.plot(main = \"Regression Tree Plot\",\n                         roundint=FALSE)\n\n\n\n\n\n\n\n\n\n\nRandom Forest\n\nrf_vip &lt;- final_rf |&gt;\n  fit(data = bike_data) |&gt;\n  extract_fit_parsnip() |&gt;\n  vip::vip()\n\nrf_vip"
  },
  {
    "objectID": "HW9.html#overall-best-model",
    "href": "HW9.html#overall-best-model",
    "title": "HW9",
    "section": "Overall Best Model",
    "text": "Overall Best Model\n\nBagged Tree had the Lowest RMSE and MAE!\n\nbagged_tree_fit &lt;- final_bagged_tree |&gt; fit(data = bike_data)\n\nbag_final_model &lt;- extract_fit_engine(bagged_tree_fit)\n\nbagged_tree_vip &lt;- bag_final_model$imp |&gt;\n  mutate(term = forcats::fct_reorder(term, value)) |&gt;\n  ggplot(aes(x = term, y = value)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(\n    title = \"Variable Importance for Bagged Tree Model\",\n    x = \"Predictors\",\n    y = \"Importance Score\"\n  ) +\n  theme_minimal()\n\nbagged_tree_vip\n\n\n\n\n\n\n\nbagged_tree_fit |&gt; \n  extract_fit_parsnip()\n\nparsnip model object\n\nBagged CART (regression with 50 members)\n\nVariable importance scores include:\n\n# A tibble: 27 × 4\n   term                                       value  std.error  used\n   &lt;chr&gt;                                      &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt;\n 1 temp_poly_1                         24313170804. 242148377.    50\n 2 temp_x_rainfall                     18714401514. 482308736.    50\n 3 dew_point_temp_poly_1               18361923598. 247573068.    50\n 4 seasons_Winter_x_temp               17964415819. 319644248.    50\n 5 seasons_Winter                      14736016480. 409620121.    50\n 6 seasons_Winter_x_holiday_No.Holiday  8626669361. 766376995.    50\n 7 seasons_Spring_x_temp                8436263764. 817544907.    50\n 8 solar_radiation_poly_1               7891716770. 473833439.    50\n 9 humidity                             4164768361. 189735375.    50\n10 rainfall_poly_1                      3854859919. 171001508.    50\n# ℹ 17 more rows"
  }
]